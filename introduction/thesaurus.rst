################################################################################
术语和定义
################################################################################
********************************************************************************
区块链技术主要术语 
********************************************************************************
- *blockchain（区块链）* - 一个存储数据的信息系统，该系统保证数据不被篡改和丢失，在传输和处理系统内数据的同时保证数据的可靠性；数据的保护是通过: (1) 将数据写到一个密码链连接块，(2) 在对等网络的节点上分散存储块链的副本，(3) 使用共识算法同步所有区块完整节点;通过将数据传输和处理(合约)的算法存储在区块链中，确保在网络中执行操作时保持数据的可靠性；块链本身也被称为区块链。
- *peer to peer network（点对点网络）* - 由计算机网络的对等节点组成（没有中央服务器）
- *block（区块）* - 在验证节点的格式和签名后，由验证节点分组为特定数据结构的事务集合。一个区块包含一个哈希指针作为前一个区块的链接，这是确保区块链的加密安全性的措施之一;在与网络上的其他验证节点达成共识之后，区块被添加到区块链中。
- *hash（哈希）* - 代表一个文件或一组电子数据集合的一串独特可再创建的加密值;它保证了数据的不变性, 任何修改数据都会更改它的散列。
- *block validation（区块验证）* - 验证块结构的正确性，如创建时间，与前一个区块的兼容性、事务签名以及事务与区块链中数据的对应关系。
- *validating node（验证节点）* - 网络上的一个节点，该节点有权限创建和验证模块。
- *consensus（共识）* - 向区块链中添加新区块的过程中验证节点和算法的协议。
- *transaction（事务）* - 在区块链网络上进行数据传输的单个操作或区块链中此类操作的记录。通常在电子货币操作中，叫做交易。
- *token（通证）* 一个代表权限的单位, 是固定的一组可识别的数值记录, 包括这些记录之间交换的权限份额机制。
- *identification（识别）* - 用于在系统中识别用户的加密程序。
- *unique identification（特定识别）* - 将用户与特定的人联系起来的程序；它需要法律和组织的努力来生物特征或其他程序的识别，以便将用户名与真实的人联系起来。
- *private key（私钥）* - 由其拥有者保密的一串字符，用于访问网络上该拥有者的虚拟账户, 签署交易。
- *public key（公钥）* - 可用于检查使用私钥进行签名的真实性的一串字符；公钥可以唯一地从私钥中派生出来，反之亦然。
- *digital signature（数字签名）* - 由于加密数据处理而获得的数字文档或消息的属性；数字签名用于检查文档的完整性（不存在修改）和真实性（验证发送方的身份）。
- *contract（合约）* - 一个程序执行操作数据存储在区块链中；所有合约都存储在区块链中。
- *transaction fee（事务费）* - 支付验证节点执行的事务的费用。
- *double spend（双重支付）* - 对区块链网络的攻击，目的是为两个不同的事务使用相同的通证（Token）；这种攻击形成区块链的分叉(主链替代版本)；这种攻击只有在攻击者控制50％或更多的网络验证能力的情况下才能执行。
- *encryption（加密）* - 数字数据转换的方式, 只有拥有相应的解密密钥时才能读取它。
- *private blockchain（私有链）* - 区块链网络所有节点和数据访问权限由一个组织(政府、公司或个人) 集中控制。
- *public blockchain（公有链）* - 区块链网络不是由任何组织控制, 所有的决定都是由网络的参与者达成共识, 每个人都可阅读访问数据。 
- *delegated proof of stake (DPoS)（委托权益证明）* - 一个区块链网络共识算法, 验证节点由代表(通常是通证的拥有者)分配,代表使用其权限的份额。

********************************************************************************
平台术语
********************************************************************************
- *testnet （测试网络）* - 用于测试软件的网络版本。
- *mainnet（主网络）* - 主要版本的网络。
- *Platform token* - 平台的通证（Token），用于支付使用网络资源（费用）。
- *Platform transaction* -该命令表示调用合约并传递参数; 节点执行事务的结果是更新平台的数据库。
- *fuel（燃料）* - 用于计算在网络上执行某些操作的费用的常规单位；燃料兑换率由验证节点的投票决定。
- *account（账户）* - 用于存储记录通证（Token）,可以使用一对密钥访问—私钥和公钥。
- *address（地址）* - 网络上用户的字符编码标识符，被视为该用户的虚拟帐户的名称。
- *associated virtual account（相关联的虚拟账户）* - 对执行合约支付的虚拟账户;合约与虚拟账户的关联是在合约创建时建立的，可随时更改；在建立一个关联账号之前，默认下，款项从执行合约的用户的虚拟账户中扣除。
- *Molis* - 一个用来连接网络的软件客户端；Molis使用户能够使用他们的虚拟帐户，构建生态系统，并在集成开发环境（创建和编辑表格，界面页面和合约）中创建应用程序。
- *web-Molis* - 一个由完整功能的软件客户端，是一个web应用程序。
- *platform ecosystem（平台生态系统）* - 一个相对封闭的编程环境，其中包括大量的应用程序和用户创建或使用的应用程序；生态系统成员可以启动派发自己的通证（Token）,使用系统的智能合约建立规则，包括成员之间的互动, 并设置成员的权限访问系统的元素。
- *ecosystem parameters（生态系统参数）* - 一组可配置的生态系统属性(名称、描述、标识、生态系统的通证（Token）名称和参数等等)；这些属性,可以编辑存储在一个专用的配置表。 
- *ecosystem members（生态系统成员）* - 有权访问特定生态系统功能和应用程序的用户。 
- *dedicated ecosystem（专用生态系统）* - 一个由所有功能标准的生态系统,但在区块链外工作(没有数据保存在区块链)；在专用的生态系统合约，通过HTTP / HTTPS协议能够访问任何web资源, 并有权配置读取数据。
- *delegated Proof of Value of Ecosystem (DPoV(E))（授权生态系统价值证明机制）* - 一个共识算法，平台生态系统（有价值证明机制的生态系统）的重要验证节点，该节点在分配投票中确认。该算法保证维护网络的正常运转;而该生态系统委托证明，满足了一些正规的指标如交易的数量，成员数量，从而形成的有价值的生态系统。为了避免假冒生态系统中的BOT产生的活动，参与批准节点的验证。该系统由通证（Token）所有者投票来实现。 
- *智语言（G Language）* - 编辑合约的脚本；智语言（G Language）包含处理从接口页面接收到的数据的功能，以及用数据库表格中的值执行操作的功能。可以在Molis软件客户端的编辑器中创建和编辑合约。
- *乾语言（Chain Language）* - 一种模板语言，包括从数据库表中获取值所需的函数，以及用于构建接口页面和将用户输入数据转发到合约的条件语句或运算符。 
- *integrated development environment（集成开发环境）* - 一组用于创建应用程序软件工具;Molis软件客户端的集成开发环境包括合约编辑、页面编辑器,工具与数据库表、语言资源编辑器和应用程序导出和导入功能；集成开发环境很快就会补充基于语义可视化编辑器的工具。
- *interface designer（界面设计器）* - Molis软件客户端中的一个工具，用于通过直接在屏幕上布置基本的应用程序元素（HTML容器，表单域，按钮等）来创建应用程序页面的界面。
- *visual interface editor（可视化界面编辑器）* - 在Molis客户软件客户端用于创建应用程序的网页界面的工具，包括界面设计和用乾语言（Chain Language）编写的页面生成器。
- *visual contract editor（可视化合约编辑器）* - 在Molis软件客户端用于创建合约使用视觉界面的工具。
- *language resources（语言资源）* - 在Molis软件客户端的一个模块，用于应用程序接口定位；它把应用程序中页面的标签与选定语言中的文本值关联在一起。
- *export of applications（导出应用程序）* -  将应用程序的源代码（任何一组表、页和合约）保存为文件。
- *import of applications（导入应用程序）* - 将应用程序（所有文件、页面和包含在导出文件中的合约）上传到生态系统中。
- *smart law（智能法律）* - 一个在区块链里的监管信息记录，用于对合约的运营操作和注册者访问权限管理的控制；智能法律对智能合约特别配置。
- *legal system（法律制度）* - 一套建立在智能法律中的法规；法律制度规范平台用户之间的关系，定义改变协议参数的过程，包括为各种挑战提供解决方案的机制。
- *application（应用程序）* - 一个由完整功能的软件应用，该软件在Molis客户软件客户端的集成开发环境创建；该应用包括数据库表，合约和接口界面的页面。 
- *application interface page（应用程序接口页面）* - 一个程序代码，使用乾语言（Chain Language）模板语言，形成屏幕上的接口页面。
- *interface block（接口区块）* - 在应用程序页面的一个程序代码，使用乾语言（Chain Language）模板语言编写。
- *contract association（合约关联模块）* - 将合约与虚拟账户关联，从中扣除执行合约事务的费用。 
- *access rights（访问权限）* - 获得创建和编辑表格，合约和界面页面的条件；对表格的访问权限可以专门设置为添加行和列，以及在列中编辑值。
- *full node（完整节点）* - 平台网络上的一个完整节点，存储在最新版本区块链上。
- *partial node（部分节点）* - 平台网络上的一个节点，仅存储具有与一个生态系统有关的数据的区块。  
- *concurrent transactions processing（并发事务处理）* - 通过同时处理来自不同生态系统的数据，来提高事务处理速度的一个方法。
